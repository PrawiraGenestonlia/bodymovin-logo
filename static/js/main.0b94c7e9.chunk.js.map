{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","ref","useRef","useMouseState","clientX","clientY","useState","animation","setAnimation","window","innerWidth","width","setWidth","useEffect","anim","lottie","loadAnimation","container","document","getElementById","renderer","loop","autoplay","path","useWindowResize","event","frame","parseInt","Number","goToAndStop","id","style","height","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8RA2CeA,MApCf,WACE,IAAMC,EAAMC,mBADC,EAEgBC,YAAcF,GAAnCG,EAFK,EAELA,QAASC,EAFJ,EAEIA,QAFJ,EAGqBC,mBAAS,IAH9B,mBAGNC,EAHM,KAGKC,EAHL,OAIaF,mBAASG,OAAOC,YAJ7B,mBAINC,EAJM,KAICC,EAJD,KA6Bb,OAtBAC,qBAAU,WACR,IAAMC,EAAOC,IAAOC,cAAc,CAChCC,UAAWC,SAASC,eAAe,MACnCC,SAAU,MACVC,MAAM,EACNC,UAAU,EACVC,KAAM,mBAERf,EAAaM,KACZ,IAEHU,aAAgB,SAACC,GACfb,EAASH,OAAOC,eAIlBG,qBAAU,WACR,IAAMa,EAAQC,SA1BE,IA0BOC,OAAOxB,GAAyBwB,OAAOjB,IAE9DJ,GAAaA,EAAUsB,YAAYH,EAAO,KACzC,CAACnB,EAAWH,EAASC,EAASM,IAG/B,yBAAKmB,GAAG,KAAKC,MAAO,CAAEpB,MAAO,OAAQqB,OAAQ,QAAU/B,IAAKA,KCzB5CgC,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrB,SAASC,eAAe,SDyHpB,kBAAmBqB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0b94c7e9.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport lottie from 'lottie-web';\nimport { useMouseState, useWindowResize } from 'beautiful-react-hooks';\n\nconst TOTAL_FRAME = 100;\n\nfunction App() {\n  const ref = useRef();\n  const { clientX, clientY } = useMouseState(ref);\n  const [animation, setAnimation] = useState('');\n  const [width, setWidth] = useState(window.innerWidth);\n  // const [height, setHeight] = useState(window.innerHeight);\n\n  useEffect(() => {\n    const anim = lottie.loadAnimation({\n      container: document.getElementById('bm'), // the dom element that will contain the animation\n      renderer: 'svg',\n      loop: false,\n      autoplay: false,\n      path: 'T&O Logo2.json' // the path to the animation json\n    });\n    setAnimation(anim);\n  }, []);\n\n  useWindowResize((event) => {\n    setWidth(window.innerWidth);\n    // setHeight(window.innerHeight);\n  });\n\n  useEffect(() => {\n    const frame = parseInt(Number(clientX) * TOTAL_FRAME / Number(width));\n    // console.log(frame);\n    animation && animation.goToAndStop(frame, 1);\n  }, [animation, clientX, clientY, width]);\n\n  return (\n    <div id=\"bm\" style={{ width: '100%', height: '100%' }} ref={ref}>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}